---
title: Python pour la data science
subtitle: TD 4 - API et webscrapping
format:
  revealjs  
---

## Intro

* **API**: Application Programming Interface: infrastructure d√©di√©e pour permettre d‚Äôacc√©der √† de la donn√©e de fa√ßon programmatique ==> l√©gal, encadr√©, document√©.
  - Exemples:
    - [API Sirene de l‚ÄôINSEE](https://www.data.gouv.fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/)
    - [Base adresse nationale de l‚ÄôIGN (BAN)](https://www.data.gouv.fr/dataservices/api-adresse-base-adresse-nationale-ban/)
    - [API directions de Google Maps](https://developers.google.com/maps/documentation/directions/overview)
    - Etc.
* **Webscrapping**: technique de reproduction de comportements humains (requ√™tes, copier, coller) pour automatiser un recueil de donn√©es.

üí°Les API sont √† privil√©gier d√®s que c‚Äôest possible!

## API

* Gratuites ou payantes
* En g√©n√©ral, n√©cessit√© de cr√©ation de compte
* Structure habituelle:
  - URL racine de l'API ("root"): (ex: `https://api-adresse.data.gouv.fr`)
  - Point d‚Äôentr√©e pour la t√¢che demand√©e ("End point"): (ex: `search`)
  - Cl√© de requ√™te (en g√©n√©ral `?q=`)
  - Param√®tres de requ√™te d√©finis dans la documentation de l‚ÄôAPI (ex: `5 +Av.+Le+Chatelier&postcode=91120`)
  
Exemple dans la base adresse nationale:

$$
 \underbrace{{https://api-adresse.data.gouv.fr}}_{Point d‚Äôentr√©e (root)}/
 \underbrace{search}_{end point}/
 \underbrace{{?q=}}_{Cl√©}
 \underbrace{{5 +Av.+Le+Chatelier}}_{Valeurs de requ√™te}
$$


==> Retourne en g√©n√©ral un objet JSON

## Application

```python
import requests       # pour lancer une requ√™te web (module natif)
import pandas as pd   # pour stocker et manipuler les donn√©es requ√™t√©es

# # Exemple avec l‚ÄôAPI BAN:
root = 'https://api-adresse.data.gouv.fr/'
endpoint = 'search/'
key = '?q='
address = '8+bd+du+port'

query = f'{root}{endpoint}{key}{address}'

print(query)  
```

1. Copiez coller le r√©sutat de `query` dans la barre url du navigateur et pressez `Entr√©e`
2. Examinez la structure de la r√©ponse

(suite au slide suivant)

---

3. Chargez le contenu pertinent de la r√©ponse dans un dataframe `pandas` au moyen du code ci-dessous

```python
req = requests.get(query)  # requ√™te web

# # R√©cup√©ration de l'ensemble de la donn√©e:
data = req.json()
df2 = pd.DataFrame(data)
df2.head()  # observez le r√©sultat...
```

<br>

```python
df3 = pd.DataFrame(data['features'])
df3.head() # observez le r√©sultat...
```

<br>

```python
# # Lorsque la structure JSON de sortie est emboit√©e comme ici, utiliser `pd.json_normalize`:
df4 = pd.json_normalize(data['features'])
df4.head() # observez le r√©sultat...
```


## Bonne pratiques du webscrapping

TODO

## Structure d'une page `HTML`

TODO

## BeautifulSoup

TODO

## Application pratique

TODO

## Expressions r√©guli√®res

* Expressions r√©guli√®res ou ‚Äúregex‚Äù ==> outils syntaxiques communs √† beaucoup de langages.

*D√©finition: *

::: {.center}
Outil permettant de d√©crire un ensemble de cha√Ænes de caract√®res possibles selon une syntaxe pr√©cise, et donc de d√©finir un motif (ou pattern)
:::

==> Tr√®s utile pour le nettoyage de textes (donn√©es issues de formulaires, extractions d‚Äôadresses mails depuis un texte, corrections de dates √† diff√©rents formats etc.)

---

### Exemple 1: Recherche basique

```python
import re  # module natif de gestion des expressions r√©guli√®res (re: 'regular expression')

text = "Quelques mots avec des chiffres: python3, data2science, hello, test"

# # Quelques patterns sous forme d'expressions r√©guli√®res
# # \w    = un caract√®re (n'importe lequel)
# # \w*   = n'importe quel mot
# # \d    = un chiffre

# # D√©finition du pattern:
pattern = r"\w*\d\w*"  # n'importe quel mot pr√©c√©dent ou suivant un chiffre

# # Recherche du pattern dans le mot:
words_with_numbers = re.findall(pattern, text)
print(words_with_numbers)
```

---

### Exemple 2: Recherche d'adresses mail dans un texte

```python
import re

text = "Contact me at hello@example.com"

# # Expression r√©guli√®re pour la d√©finition d'un email:
pattern = r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"

match = re.search(pattern, text)

if match:
    print("Found email:", match.group())
```

---

* Outils de tests d‚Äôexpressions r√©guli√®res: [https://regex101.com/](https://regex101.com/)
* [Cheatsheet](https://ole.michelsen.dk/tools/regex/):

<br>

![](./img/regex_cheatsheet.jpg){.absolute bottom=2 right=2 width=80%}


[Source: https://ole.michelsen.dk/tools/regex/]{.legend .absolute bottom=0 right=0}

---

[TD 05](./05_ML_session1.html)
