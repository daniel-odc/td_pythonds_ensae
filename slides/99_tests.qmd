---
title: |
  <div>Python pour la data science TD 3</div>
  <div style="text-align:center;">
    <img src="./img/git_logo_git.png" style="height:100px; margin-right:10px;">
  </div>
format:
  revealjs:
    css: slides.css   # ensure the CSS is loaded even if _metadata.yml isn't picked up
---

## TESTS Pourquoi utiliser Git?   <!-- use H2, not H1, since slide-level is 2 by default -->

Inline (HTML): <span class="textgrey">my grey text</span>

Inline (Pandoc span): [my grey text]{.textgrey}

Block paragraph:
This whole paragraph is grey.
{.textgrey}

## Pourquoi utiliser Git?


Inline (HTML): <span class="textgrey">my grey text</span>
[grey test]{.textgrey}

::: columns
::: column

* Multiples versions d’un fichier au cours du temps
* Casse-tête sur le nommage des versions de fichiers: 
    * `[date]_[fichier].py`? (ex: `241001_main.py`)
    * `[fichier]_[version].py`? (ex: `main_v0.3.py`)

:::
::: column
![](./img/git_finalfinal.png)
:::
:::

* Difficulté à connaitre les évolutions entre fichiers (ex: correction de bug, ajout de fonctionnalité etc.)
* Fichiers avec le même nom en local et dans le cloud (Google Drive, Sharepoint etc.) peuvent être différents
* Travailler en équipe sur le même fichier et gestion des conflits

==> Solution:   `Git`.
* **Logiciel** spécialisé dans le contrôle de version (de loin le plus populaire)
* Utilisé par tous les développeurs, qu’ils travaillent seuls ou en équipe.

*Notes:*
* `Git` est indépendant du langage de programmation, et peut être utilisé pour d’autres finalités: documentation ou tout projet avec des évolutions de fichiers.
* `Git` n’est pas `Github` ou `Gitlab` (cf. slide suivant)

---

## `Git` vs `GitHub` vs `Gitlab` 

* `Git` est un logiciel:
    - Utilisation en ligne de commandes
    - Interfaces graphiques sur la plupart des outils modernes de développement (`RStudio`, `VS Code`, `Pycharm` etc.)
* `GitHub`, `GitLab`, `Bitbucket` etc. sont des **forges logicielles**.
    - Espace d’archivage de code dans le cloud
    - Fonctions supplémentaires de réseaux sociaux

---

## Principe de fonctionnement

![](./img/git_localremote.png)

---

## Principe de fonctionnement

::: columns

::: column
*Évolution du fichier dans le temps:*

![](./img/git_evol_file.png){height="500px"}

:::
::: column
*Suivi des modifications sur `GitHub`:*

![](./img/git_evol_file_log.png)
:::
:::

---

## Création de compte `GitHub`

::: columns

::: column
### Création de compte et dépôt

* Se rendre sur `github.com` et créer un compte si pas déjà fait
* Créer un dépôt privé.
* Ajouter un `README.md`
* Ajouter un `.gitignore` (modèle: `Python`)


:::
::: column

![](./img/git_account_creation.jpg)
:::
:::

---

## Authentification - `GitHub`

* Nécessaire pour contribuer à un dépôt
* Deux types d’authentifications:
  - HTTPS: login et mot de passer ou token généré par GitHub
  - SSH: clé cryptée en local sur le poste de travail
* Aller sur son profil en haut à gauche puis: 

> **settings** / menu gauche: **developper settings** / **Personal access tokens**, click **Fine-grained tokens** / **Generate new token**.

* Donner un nom au token, période de validité et le copier.<br>



![](./img/git_authentication.jpg)

---

## Authentification - `SSP Cloud` {.smalltext}

is this text smaller?

* Ne jamais copier le token dans un fichier texte non crypté! (utiliser [Keepass](https://keepass.fr/) par exemple).
* Aller sur [“Mon compte”](https://auth.lab.sspcloud.fr/auth/realms/sspcloud/protocol/openid-connect/auth?client_id=onyxia&redirect_uri=https%3A%2F%2Fdatalab.sspcloud.fr%2F&response_type=code&scope=openid+profile&state=b2lkYy1zcGEulmV5oZr5T_O8qtDJMdYP&code_challenge=k7U-KbYo2h0izIbAQfoJL0XVBNlqdL5W2akZFKeCik0&code_challenge_method=S256&response_mode=fragment&audience=onyxia&ui_locales=en&onyxia-instance-public-url=https%3A%2F%2Fdatalab.sspcloud.fr) du `SSPCloud`, onglet **Git**, section **Git Forge Personal Access Token**, **edit** et coller le token. 
* Aller sur [Mes Services](https://auth.lab.sspcloud.fr/auth/realms/sspcloud/protocol/openid-connect/auth?client_id=onyxia&redirect_uri=https%3A%2F%2Fdatalab.sspcloud.fr%2F&response_type=code&scope=openid+profile&state=b2lkYy1zcGEuOVUrrs-a9IJmQuEQ9Quy&code_challenge=hkJJmj3gX-XcbS2IkDdFUrPsN5dTRYXpYZ-pTYv4S30&code_challenge_method=S256&response_mode=fragment&audience=onyxia&ui_locales=en&onyxia-instance-public-url=https%3A%2F%2Fdatalab.sspcloud.fr) / ➕Nouveau service / vscode-python


![](./img/git_ssp_cloud_authentication.jpg)

---

## Clone de repo `Git`

::: columns
::: column

* Sur le Repo `Git`, récupérer l’url du repo.
* Sur le projet `SSPCloud`: Ouvrir le terminal (`☰ / Terminal / New Terminal`) et taper

```shell
git clone https://github.com/<username>/<reponame>.git
```

* Suivre les étapes
* Observer la mise à jour de l’explorateur de fichiers sur `VSCode`, votre `README` et votre `.gitignore` visibles sur `Github` doivent maintenant être là.
* Tester l’ajout et la modification de fichiers et répertoires.

::: 
::: column

![](./img/git_clone.jpg)

::: 
::: 

---

## Les commandes essentielles

| Commande | Description |
| --- | --- |
| `git remote -v` | Obtention de l’url du repo distant |
| `git add my_file.py` | Ajout du fichier my_file.py à la staging area  |
| `git commit –m "commentaire"` | Commit des changements avec commentaire de description des modifications |
| `git pull origin master` | Récupération de la dernière version du code depuis le repo remote (opération `« fetch »`), et fusion avec changements locaux si nécessaire (opération `« merge »`) |
| `git push origin master` | Envoi des dernières modifications locales sur le repo remote |

---

## Le fichier `.gitignore`


* Permet de lister des répertoires, fichiers, ou types de fichiers à ne pas inclure dans les historiques de versions.
* Exemple:
  - Jeux de données
  - Fichiers de configuration avec mots de passe
  - Fichiers temporaires
  - Librairies externes
  - Etc.

::: columns

::: column

* Syntaxe:
  - `#`: 		commentaires
  - `my_file.txt`: 	le fichier my_file.txt ne sera pas pris en compte
  - `*.txt`: 	aucun fichier texte pris en compte
  - `__pycache__`: aucun fichier dans le répertoire `__pycache__` ne seront pris en compte.

::: 
::: column
![](./img/git_gitignore.png)

*Exemple de fichier `.gitignore`* {.textgrey}
::: 
::: 

---

## Structurer un projet Python

::: columns
::: column
* Structure minimale:

![](./img/python_project_structure_minimale.png)

::: 
::: column
* Structure complète:

![](./img/python_project_structure_complete.png)
::: 
::: 